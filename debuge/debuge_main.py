# coding=utf-8
from debuge.debuge_source import debug
"""
########################################################################################################################
这是一个关于PyCharm的debug断点调试功能的测试（分析理解功能）
########################################################################################################################
这个测试主要分为两个python文件，一个是当前的debuge_main.py文件，还有一个是debuge_source.py文件。在debuge_source.py中的第10行info()函数的
调用已经打了一个断点。
函数的运行分析：
点击调试后，程序会从此文件从上而小逐行执行，先：from debuge.debuge_source import debug导入debuge_source.py中的debuge方法（函数），之所以
能够导入这个函数是因为他们同在一个文件夹下，如果不是在同一个文件夹下，可以在这两个文件同时所在的文件夹下新建一个：init.py文件，这样程序就会将整个文件
夹作为一个模块，就可以导入了模块了；接着会执行：
one=1
if __name__=="__main__":
    two=2
    main()
在执行main()时，会由main()的定义去执性debug()，接着执行info()，执行info()时由于有断点，所以会直接在这里停下，让我们选择接下来的调试步骤，可以进
入函数，也可以直接跳过，或者逐行执行，主要看你想怎么检查错误，点击调试器中的按钮来分析了解按钮的功能与意义。
其中：
#步过（F8）：直接执行并且跳过当前行需要执行的函数，跳到此函数的下一行代码，接着继续进行选择代码的执行方式
#步入（F7）：进入当前行需要执行的函数的内部（定义），接着继续进行选择代码的执行方式
》》注意：步过和步入的区别，如果当前行不是函数或者类，只是普通的代码（变量，表达式），两者没有区别，均是执行此行，进入下一行。
#单步执行我的代码（alt+shfit+F7）：顾名思义，单步执行
》》注意：单步执行我的代码和步入的区别，单步执行我的代码是根据代码执行的逻辑去找下一行代码，所以才进入了函数的内部；而步入是进入函数的内部，其实区别不大。
#强制单步执行（alt+shfit+F7）：顾名思义
#步出（shift+F8）：直接执行并跳出当前所查看的函数内部
注意：单步执行我的代码和步出的区别，当你所查看的函数内部已经执行到最后一行（即return），这个时候如果点击步出会回到函数的调用处（即你点击步入的时候的那
一行，并且这个函数已经执行完了，所以你再一次点击步入相当于：单步执行我的代码），如果点击单步执行我的代码则是不会回到点击步入的那行，而是直接执行这个函数后面的内容。
#运行到光标处（Alt+F9）：即直接到你点击鼠标后的光标处，对于跳过代码很有用（比如跳过for循环）
"""
def main():
    debug()
one=1
if __name__=="__main__":
    two=2
    main()
